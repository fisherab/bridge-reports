#!/usr/bin/env python3

import csv

from jinja2 import Template, FileSystemLoader, TemplateNotFound, Environment, select_autoescape
from os.path import join, exists, getmtime
import sys
from pathlib import Path
from datetime import date, datetime
import json
import argparse
from shutil import copy

# Parse the arguments
now = datetime.now()
date = str(now.day) + '/' + str(now.month) + '/' + str(now.year)
parser = argparse.ArgumentParser()
parser.add_argument("results", help="the input csv file with the results")
parser.add_argument("title", help="the basic title for the event series - such as the day")
parser.add_argument("-d", "--date", help="the date of the event (default to today: " + date +")", default=date) 
args = parser.parse_args()
resultsFile = args.results
title = args.title
date = args.date

# Read in the playerfile and store in a directory indexed by BBO name
with open("playerfile.csv") as csv_file:
    csv_reader = csv.reader(csv_file, delimiter=',')
    persons = {}
    keynames = []
    wantedKeys = ["email_address", "username", "realname"]
    for row in csv_reader:
        if not keynames:
            keynames = row
        else:
            person = {}
            for keyname, value in zip(keynames, row):
                if keyname in wantedKeys:
                    person[keyname] = value
            persons[person["username"]] = person
            words = person["realname"].split()
            person["givenname"] = ' '.join(words[:-1])
            person["surname"] = words[-1] 
            del person["username"]

# Fill the results dictionary with boards from the csv file. It is indexed by boardnum and contains a list of boards
# Fill the resultsByPair dictionary indexed by pair number with a dictionary of boards indexed by boardnumber
# Keynames is an array with the keys found in the csv file header
# Pairs is a dictionary indexed by pair number and holding the pair names and ns is a set of NS pair numbers
# PairUsernames is a dictionary indexed by pair number and holding the BBO user names as a tuple
with open(resultsFile) as csv_file:
    csv_reader = csv.reader(csv_file, delimiter=',')
    keynames = [] 
    results = {}
    resultsByPair = {}
    pairs = {}
    ns = set()
    pairUsernames = {}
    wantedKeys = ['board', 'score', 'ns_pair', 'ew_pair', 'north_username', 'south_username', 'east_username', 'west_username', 'contract', 'suit', 'doubling','declarer', 'result']

    for row in csv_reader:
        if not keynames:
            keynames = row
        else:
            board = {}
            for keyname, value in zip(keynames, row):
                if keyname in wantedKeys:
                    board[keyname] = value;
            board['contract'] = board['contract'] + board['suit'] + board['doubling']
            del board['suit']
            del board['doubling']
            boardNum = int(board['board'])
            board['score'] = int(board['score'])
            if boardNum not in results: results[boardNum] = []
            results[boardNum].append(board)
            nspair = board['ns_pair']
            ewpair = board['ew_pair']
            for dirn in ['north','south','east','west']: board[dirn + '_realname'] = persons[board[dirn+'_username']]['realname']
            pairs[nspair] = board['north_realname'],board['south_realname']
            pairs[ewpair] = board['east_realname'],board['west_realname']
            ns.add(nspair)
            pairUsernames[nspair] = board['north_username'],board['south_username']
            pairUsernames[ewpair] = board['east_username'],board['west_username']
            if nspair not in resultsByPair:
                resultsByPair[nspair] = {boardNum:board}
            else:
                resultsByPair[nspair][boardNum] = board   
            if ewpair not in resultsByPair:
                resultsByPair[ewpair] = {boardNum:board}
            else:
                resultsByPair[ewpair][boardNum] = board

# Build the shortPairs dictionary which is indexed by pair number and holds one string with given names of the pair separated by ampersand
shortPairs = {}
for key, (ne,sw) in pairs.items():
    shortPairs[key] = ' '.join(ne.split()[:-1]) + ' & ' + ' '.join(sw.split()[:-1]) 

# For each board number sort the boards by score and calculate the points and percentages
for boardNum in results:
    played = len(results[boardNum])
    results[boardNum].sort(key=lambda board: board['score'],reverse=True)

for key in results.keys():
    resultsForBoard = results[key]
    index = 0
    best = resultsForBoard[index]['score']
    for seqnum in range(len(resultsForBoard)):
        board = resultsForBoard[seqnum]
        if resultsForBoard[seqnum]['score'] < best:
            for i in range(index, seqnum):
                resultsForBoard[i]['ns_points'] = 2*played - index-seqnum-1
                resultsForBoard[i]['ew_points'] = 2*played - 2 - resultsForBoard[i]['ns_points']
            index = seqnum
            best = resultsForBoard[index]['score']

    for i in range(index, len(resultsForBoard)):
        resultsForBoard[i]['ns_points'] = 2*played - index-len(resultsForBoard)-1
        resultsForBoard[i]['ew_points'] = 2*played - 2 - resultsForBoard[i]['ns_points']

    for board in resultsForBoard:
        board["ns_%"] = round(board['ns_points'] * 50 / (len(resultsForBoard)-1),2)
        board["ew_%"] = round(board['ew_points'] * 50 / (len(resultsForBoard)-1),2)

# Fill the rankings dictionary indexed by pair number and compute the total points for each pair
rankings = {}
for i in range(len(pairs)):
    rankings[str(i+1)] = {'points':0} 

for key in results.keys():
    resultsForBoard = results[key]
    for board in resultsForBoard:
        rankings[board['ns_pair']]['points'] +=  board['ns_points']
        rankings[board['ew_pair']]['points'] +=  board['ew_points']

# Compute the ranking table which is a list of rankings and include percentages and other quantities
rankingTable = []
tops = len(results) * (2* played -2)
for key in rankings.keys():
    ranking = rankings[key]
    ranking['%'] = ranking['points'] * 100. / tops
    ranking['pair'] = key
    ranking['name'] = pairs[key]
    ranking['tops'] = tops
    rankingTable.append(ranking)

# Sort the ranking list by percentage score. As all play the same number of boards 
# we could have used points.
rankingTable.sort(key = lambda pair: pair['%'], reverse=True)

# Build separe rankings for NS and for EW
rankingTableNS = []
rankingTableEW = []
for ranking in rankingTable:
    if ranking['pair'] in ns:
        rankingTableNS.append(ranking)
    else:
        rankingTableEW.append(ranking)

# Compute the position making sure that identical percentages are handled correctly and then 
# round the percentages
for rankingTable,dirn in (rankingTableNS, 'NS'),(rankingTableEW, 'EW'):
    pos = 0
    oldScore = rankingTable[0]["%"]
    for i in range (len(rankingTable)):
        ranking =  rankingTable[i]            
        if ranking["%"] != oldScore:
            scoreText = str(pos+1)
            if i != pos + 1: scoreText += "="
            for j in range(pos,i):
                rankingTable[j]["pos"] = scoreText
            oldScore = ranking["%"]
            pos = i
    scoreText = str(pos+1)
    if len(rankingTable) != pos + 1: scoreText += "="
    for j in range(pos,len(rankingTable)):
        rankingTable[j]["pos"] = scoreText

    for ranking in rankingTable:
        ranking["%"] = round(ranking['%'],2)
        ranking["dirn"] = dirn

# Read the old events file
p = Path('.')/"events"
if p.exists():
    with open("events") as eventfile:
        events = eventfile.readlines()
else:
    events = []
eventNum = len(events)
fullTitle = date + ' ' + title + ' Casual Video Bridge (' + str(len(pairs)/2) + ' pairs)'

# Write the events file back
desc = str(eventNum) + ' ' + fullTitle
nl = p.exists()
with open(p,"a") as eventfile:
    if nl: eventfile.write('\n')
    eventfile.write(desc)
events.append(desc)

# Make the directories
z = Path('.')/"cvb"
ev = z/str(eventNum)
ev.mkdir(parents = True, exist_ok = True)

# Prepare info for emails
emails = []
for ranking in rankings.values():
    email1 = {'pos' : ranking['pos'], 'dirn': ranking['dirn'], '%': ranking['%']}
    email2 = email1.copy()
    p1,p2 = pairUsernames[ranking['pair']]
    email1['givenname'] = persons[p1]['givenname']
    email1['email_address'] = persons[p2]['email_address']
    email2['givenname'] = persons[p1]['givenname']
    email2['email_address'] = persons[p2]['email_address']
    emails.append(email1)
    emails.append(email2)

# Collect odd bits of information to store in meta.json
meta = {}
meta['boards'] = max(results.keys())
meta['title'] = fullTitle

# Copy scorecards.php into cvb/
copy('scorecards.php', 'cvb')

# Set up template for jinja2
env = Environment(
loader=FileSystemLoader('.'),
autoescape=select_autoescape(['html'])
)

with open(ev/"boards.json",'w') as boardfile:
    json.dump(resultsByPair, boardfile)
with open(ev/"pairs.json",'w') as pairfile:
    json.dump(shortPairs, pairfile)
with open(ev/"emails.json",'w') as emailfile:
    json.dump(emails, emailfile)
with open(ev/"meta.json", 'w') as metafile:
    json.dump(meta, metafile)
template = env.get_template('ranking.html')
with open(ev/"index.html",'w') as evfile:
    print(template.render(title=fullTitle, rankingNS=rankingTableNS, rankingEW=rankingTableEW),file=evfile)
events.reverse()
with open(z/"index.html",'w') as eventsListFile:
    print(env.get_template('events.html').render(events = events), file = eventsListFile)
